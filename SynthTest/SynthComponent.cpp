#include "JuceHeaders.h"
#include "SynthComponent.h"

SineWaveVoice::SineWaveVoice()
    : currentAngle(0), angleDelta(0), level(0), tailOff(0)
{
}

bool SineWaveVoice::canPlaySound(SynthesiserSound* sound)
{
    return dynamic_cast<SineWaveSound*> (sound) != nullptr;
}

void SineWaveVoice::startNote(int midiNoteNumber, float velocity,
                SynthesiserSound*, int /*currentPitchWheelPosition*/)
{
    currentAngle = 0.0;
    level = velocity * 0.15;
    tailOff = 0.0;

    double cyclesPerSecond = MidiMessage::getMidiNoteInHertz(midiNoteNumber);
    double cyclesPerSample = cyclesPerSecond / getSampleRate();

    angleDelta = cyclesPerSample * 2.0 * double_Pi;
}

void SineWaveVoice::stopNote(float /*velocity*/, bool allowTailOff)
{
    if (allowTailOff)
    {
        // start a tail-off by setting this flag. The render callback will pick up on
        // this and do a fade out, calling clearCurrentNote() when it's finished.
        if (tailOff == 0.0) // we only need to begin a tail-off if it's not already doing so - the
                            // stopNote method could be called more than once.
            tailOff = 1.0;
    }
    else
    {
        // we're being told to stop playing immediately, so reset everything..
        clearCurrentNote();
        angleDelta = 0.0;
    }
}

void SineWaveVoice::pitchWheelMoved(int /*newValue*/)
{
    // can't be bothered implementing this for the demo!
}

void SineWaveVoice::controllerMoved(int /*controllerNumber*/, int /*newValue*/)
{
    // not interested in controllers in this case.
}

void SineWaveVoice::renderNextBlock(AudioSampleBuffer& outputBuffer, int startSample, int numSamples)
{
    if (angleDelta != 0.0)
    {
        if (tailOff > 0)
        {
            while (--numSamples >= 0)
            {
                const float currentSample = (float)(std::sin(currentAngle) * level * tailOff);

                for (int i = outputBuffer.getNumChannels(); --i >= 0;)
                    outputBuffer.addSample(i, startSample, currentSample);

                currentAngle += angleDelta;
                ++startSample;

                tailOff *= 0.99;

                if (tailOff <= 0.005)
                {
                    clearCurrentNote();

                    angleDelta = 0.0;
                    break;
                }
            }
        }
        else
        {
            while (--numSamples >= 0)
            {
                const float currentSample = (float)(std::sin(currentAngle) * level);

                for (int i = outputBuffer.getNumChannels(); --i >= 0;)
                    outputBuffer.addSample(i, startSample, currentSample);

                currentAngle += angleDelta;
                ++startSample;
            }
        }
    }
}


// SynthAudioSource ===============================================================================

SynthAudioSource::SynthAudioSource(MidiKeyboardState& keyState)
    : keyboardState(keyState)
{
    // Add some voices to our synth, to play the sounds..
    for (int i = 4; --i >= 0;)
    {
        synth.addVoice(new SineWaveVoice());   // These voices will play our custom sine-wave sounds..
        synth.addVoice(new SamplerVoice());    // and these ones play the sampled sounds
    }

    synth.addSound(new SineWaveSound());
}

void SynthAudioSource::prepareToPlay(int /*samplesPerBlockExpected*/, double sampleRate)
{
    midiCollector.reset(sampleRate);
    synth.setCurrentPlaybackSampleRate(sampleRate);
}

void SynthAudioSource::releaseResources()
{
}

void SynthAudioSource::getNextAudioBlock(const AudioSourceChannelInfo& bufferToFill)
{
    // the synth always adds its output to the audio buffer, so we have to clear it
    // first..
    bufferToFill.clearActiveBufferRegion();

    // fill a midi buffer with incoming messages from the midi input.
    MidiBuffer incomingMidi;
    midiCollector.removeNextBlockOfMessages(incomingMidi, bufferToFill.numSamples);

    // pass these messages to the keyboard state so that it can update the component
    // to show on-screen which keys are being pressed on the physical midi keyboard.
    // This call will also add midi messages to the buffer which were generated by
    // the mouse-clicking on the on-screen keyboard.
    keyboardState.processNextMidiBuffer(incomingMidi, 0, bufferToFill.numSamples, true);

    // and now get the synth to process the midi events and generate its output.
    synth.renderNextBlock(*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
}


// SynthComponent =================================================================================

SynthComponent::SynthComponent(AudioDeviceManager& audioDeviceManager)
    : deviceManager(audioDeviceManager)
    , synthAudioSource(keyboardState)
    , keyboardComponent(keyboardState, MidiKeyboardComponent::horizontalKeyboard)
{
    addAndMakeVisible(keyboardComponent);
    audioSourcePlayer.setSource(&synthAudioSource);
    deviceManager.addAudioCallback(&audioSourcePlayer);
    deviceManager.addMidiInputCallback(String::empty, &(synthAudioSource.midiCollector));

    setOpaque(true);
    setSize(640, 480);
}

SynthComponent::~SynthComponent()
{
    audioSourcePlayer.setSource(nullptr);
    deviceManager.removeMidiInputCallback(String::empty, &(synthAudioSource.midiCollector));
    deviceManager.removeAudioCallback(&audioSourcePlayer);
}

void SynthComponent::paint(Graphics& g)
{
    g.fillAll(Colours::white);
}

void SynthComponent::resized()
{
    Rectangle<int> rect(getLocalBounds());
    keyboardComponent.setBounds(rect.removeFromTop(64));
}